---

- name: Make Sure ~/.composer exists
  file:
    path="{{ nex_app_unix_home }}/.composer"
    state="directory"
    mode=2751
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]

- name: Install Composer auth.json
  template:
    src="auth.json.j2"
    dest="{{ nex_app_unix_home }}/.composer/auth.json"
    mode="0644"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]

- name: Register Contents Of Doc Root
  command: "ls {{ nex_app_doc_root }}"
  register: doc_root_contents
  when:
    - inventory_hostname == groups['fs'][0]

- name: Create Magento Project
  composer:
    command="create-project"
    arguments="--repository-url=https://repo.magento.com/ {{ magento_project_name }} {{ nex_app_doc_root }}"
    working_dir="{{ nex_app_unix_home }}"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - magento_fresh_install
    - doc_root_contents.stdout == ""

- name: Fix Perms
  shell: find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \; && find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \; && chmod u+x bin/magento
  args:
    chdir: "{{ nex_app_doc_root }}"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - magento_fresh_install
    - doc_root_contents.stdout == ""

- name: Make Sure var/composer_home exists
  file:
    path="{{ nex_app_doc_root }}/var/composer_home"
    state="directory"
    mode=2751
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - magento_deploy_sample_data

- name: Install Composer var/composer_home/auth.json
  template:
    src="auth.json.j2"
    dest="{{ nex_app_doc_root}}/var/composer_home/auth.json"
    mode="0644"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - magento_deploy_sample_data
    
- name: Deploy Sample Data
  shell: ./magento sampledata:deploy
  args:
    chdir: "{{ nex_app_doc_root }}/bin"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - magento_fresh_install
    - doc_root_contents.stdout == ""
    - magento_deploy_sample_data

- name: Magento Fresh Install
  shell: >
    ./magento setup:install 
    --base-url=http://{{ nex_user_domain }}/
    --base-url-secure=https://{{ nex_user_domain }}/
    --use-secure=1
    --use-secure-admin=1
    --db-host={{ magento_db_host }} 
    --db-name={{ magento_db_name }}
    --db-user={{ magento_db_user }}
    --db-password={{ magento_db_pass }}
    --admin-firstname={{ magento_admin_firstname }} 
    --admin-lastname={{ magento_admin_lastname }} 
    --admin-email={{ magento_admin_email }}
    --admin-user={{ magento_admin_user }}
    --admin-password={{ magento_admin_pass }} 
    --language={{ magento_lang }}
    --currency={{ magento_currency }}
    --timezone={{ magento_timezone }}
    --backend-frontname={{ magento_backend_frontname }}
    --cleanup-database
    --sales-order-increment-prefix="ORD$" 
    --session-save=db 
    --use-rewrites=1
  args:
    chdir: "{{ nex_app_doc_root }}/bin"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - doc_root_contents.stdout == ""
    - magento_fresh_install

- name: Update/Clone Client Repository
  git:
    repo="{{ magento_client_repo }}"
    dest="{{ nex_app_doc_root }}"
    version="{{ magento_deploy_branch }}"
    force="yes"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when: 
    - inventory_hostname == groups['fs'][0]
    - not magento_fresh_install

- name: Run Composer Install
  composer:
    command="install"
    working_dir="{{ nex_app_doc_root }}"  
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - not magento_fresh_install

- name: Fix Perms
  shell: find var vendor pub/static pub/media app/etc -type f -exec chmod u+w {} \; && find var vendor pub/static pub/media app/etc -type d -exec chmod u+w {} \; && chmod u+x bin/magento
  args:
    chdir: "{{ nex_app_doc_root }}"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - not magento_fresh_install

- name: Generate app/etc/config.php
  shell: ./magento module:enable --all
  args:
    chdir: "{{ nex_app_doc_root }}/bin"
    creates: "{{ nex_app_doc_root }}/app/etc/config.php"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    - not magento_fresh_install
    
- name: Generate app/etc/env.php
  template:
    src="env.php.j2"
    dest="{{ nex_app_doc_root }}/app/etc/env.php"
  sudo: yes
  sudo_user: "{{ nex_app_unix_user }}"
  when:
    - inventory_hostname == groups['fs'][0]
    
#- name: Upgrade magento
#  shell: ./magento setup:upgrade
#  args:
#    chdir: "{{ nex_app_doc_root }}/bin"
#  sudo: yes
#  sudo_user: "{{ nex_app_unix_user }}"
#  when:
#    - inventory_hostname == groups['fs'][0]
#    - not magento_fresh_install

#- name: Download Magento
#  get_url: 
#    url={{ magento_url }}
#    dest=/tmp/magento.tar.gz
#    mode=0644
#  when:
#    - server_role == "fs"    
#
#- name: Unarchive Magento
#  command: > 
#    tar 
#    --strip 1 
#    -xvzf 
#    /tmp/magento.tar.gz
#    chdir="{{ nfs_shared_path }}/{{ nex_app_dest }}" 
#    creates="{{ nfs_shared_path }}/{{ nex_app_dest }}/index.php"
#  sudo: yes
#  sudo_user: "{{ nex_app_unix_user }}"
#  when:
#    - server_role == "fs"
#
#- name: Run Composer Install
#  composer:
#    command="install"
#    working_dir="{{ nex_app_root }}/{{ nex_app_dest }}"  
#  sudo: yes
#  sudo_user: "{{ nex_app_unix_user }}"
#  when:
#    - inventory_hostname == groups['fs'][0]